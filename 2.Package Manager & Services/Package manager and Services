Package Manager:
A package manager is a software tool that automates the process of installing, upgrading, configuring, and removing software packages on a computer system. It helps
manage dependencies and ensures that software installations are smooth and consistent. Package managers also provide facilities for searching, querying, and 
updating packages from repositories.

RPM:
RPM (Red Hat Package Manager) is a package management system used by many Linux distributions, particularly those derived from Red Hat Enterprise Linux (RHEL) and 
Fedora. It provides a way to package software into distributable packages, which include the compiled program, configuration files, documentation, and metadata. 
RPM packages have a ".rpm" file extension and can be installed, upgraded, or removed using the RPM command-line tool.

YUM:
YUM (Yellowdog Updater, Modified) is a high-level package management utility for RPM-based systems. It was originally developed for the Yellow Dog Linux 
distribution but has since become the default package manager for many other distributions like CentOS and Fedora. YUM automates the process of retrieving, 
installing, and updating RPM packages from designated repositories. It handles dependencies intelligently, resolving them automatically during installation or 
removal of packages.
•	Difference between the YUM and the RPM :-
•	RPM is like the basic building block for managing individual packages on RPM-based Linux systems.
•	YUM, on the other hand, is a higher-level tool that makes package management easier by handling dependencies automatically and offering features like repository 
  management.
•	With RPM, you work directly with package files (.rpm) for manual tasks like installation and querying.
•	YUM simplifies day-to-day package management by automatically resolving dependencies and providing a more user-friendly interface for common operations.
•	In essence, RPM is more manual and low-level, while YUM is higher-level and automates many tasks for smoother package management on RPM-based systems.

A.	rpm -i telnet.rpm       (Install the Package)
B.	rpm -e telnet.rpm     (uninstall the Package)
C.	rpm -q telnet.rpm     (Query about the Package) 

which rpm package manager is installed in the server??
rpm -qi package_name

when to use yum and when to use rpm??
Use when:
You need to install a single package and already have the .rpm file downloaded.
You want more fine-grained control over the installation process, including specifying dependencies manually.
You need to troubleshoot package issues by inspecting the .rpm file directly.
Example: rpm -i my_package.rpm (installs the downloaded package), rpm -Uvh --test my_package.rpm (tests the installation without actually performing it).

Use when:
You want to install, update, or remove multiple packages at once.
You want to automatically resolve dependencies between packages, ensuring everything installs correctly.
You want to easily manage repositories and switch between them for different software versions.
You prefer a user-friendly command-line interface with features like progress bars and filtering.
Example: yum install httpd (installs the Apache web server), yum update (updates all installed packages), yum remove mysql (removes the MySQL database server).


What are services in Linux?
Services are background processes that run on a server, like web servers or database servers. They need to start automatically when the server boots and follow a 
specific startup order if they depend on each other.

How are services managed?
In Linux, services are managed using utilities like systemctl. You can start, stop, enable (start at boot), or disable (don't start at boot) services with these 
commands.

Systemd:
Start service: systemctl start <service_name>
Stop service: systemctl stop <service_name>
Restart service: systemctl restart <service_name>
Enable service at boot: systemctl enable <service_name>
Disable service at boot: systemctl disable <service_name>
Check service status: systemctl status <service_name>

How to configure a program as a service?
To configure a program as a service, you create a systemd unit file (e.g., myapp.service) in /etc/systemd/system/. In the file, define a [Service] section with the 
command to run your program. Reload systemd (systemctl daemon-reload), then start your service (systemctl start myapp). You can also enable it to start at boot with
systemctl enable myapp.

Service Unit File Sections:

[Unit]: Provides metadata like service description.
[Service]: Defines how to start and manage the service.
[Install]: Specifies when the service should be started (e.g., after other services).
